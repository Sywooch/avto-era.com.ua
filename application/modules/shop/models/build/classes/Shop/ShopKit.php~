<?php

/**
 * Skeleton subclass for representing a row from the 'shop_kit' table.
 *
 * 
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.Shop
 */
class ShopKit extends BaseShopKit {

    /**
     * return all attributes
     * @return array
     */
    public function attributeLabels() {
        return array(
            'Id' => ShopCore::t('ID'),
            'Active' => ShopCore::t('Активный'),
            'Name' => ShopCore::t('Название'),
            'Position' => ShopCore::t('Позиция'),
            'MainProduct' => ShopCore::t('Главный товар'),
            'MainProductId' => ShopCore::t('ID товара'),
            'AttachedProductsIds' => ShopCore::t('Прикрепленные товары'),
            'Discount' => ShopCore::t('Скидка'),
        );
    }

    private $price = 0;
    private $allPrice = 0;

    /**
     * Validation rules
     * @return array
     */
    public function rules() {
        return array(
            array(
                'field' => 'Active',
                'label' => $this->getLabel('Name'),
                'rules' => 'is_natural',
            ),
            array(
                'field' => 'Position',
                'label' => $this->getLabel('Position'),
                'rules' => 'is_natural',
            ),
            array(
                'field' => 'MainProductId',
                'label' => $this->getLabel('MainProductId'),
                'rules' => 'is_natural|required',
            ),
            array(
                'field' => 'AttachedProductsIds[]',
                'label' => $this->getLabel('AttachedProductsIds'),
                'rules' => 'is_natural|required',
            ),
            array(
                'field' => 'Discounts[]',
                'label' => $this->getLabel('Discount'),
                'rules' => 'is_natural|required|less_than[101]',
            ),
        );
    }

    private $arrayForCart = array('id' => array(), 'name' => array(), 'price' => array());

    /**
     * Return The atached to a kit SProducts objects
     * 
     * @param	string $modelAlias The alias of a model in the query
     * @param	Criteria $criteria Optional Criteria to build the query from
     * @return	SProducts|void
     */
    public function getAtachedProducts($criteria = null, $con = null) {
        $criteria = ShopKitProductQuery::create($criteria, $con)
                ->select(array('ProductId'));
        $pIds = $this->getShopKitProducts($criteria, $con)->toArray();

        if (!empty($pIds))
            return SProductsQuery::create()->findPks($pIds);
    }

    /**
     * Return main product SProducts object
     * 
     * @param	PropelPDO Optional Connection object.
     * @return	SProducts - main product of the kit. 
     */
    public function getMainProduct(PropelPDO $con = null) {
        return $this->getSProducts($con);
    }

    public function getShopKitProducts($criteria = null) {
        $criteria = $criteria === null ? ShopKitProductQuery::create()->orderByProductId(Criteria::ASC) : $criteria;

        $product = parent::getShopKitProducts($criteria);
        $this->arrayForCart = array('id' => array(), 'name' => array(), 'price' => array());

        foreach ($product as $kitProduct) {
            if (gettype($kitProduct) !== 'string') {
                $productPrice = $this->getSProducts();

                array_push($this->arrayForCart['name'], $kitProduct->getSProducts()->getName());
                array_push($this->arrayForCart['id'], (int) $kitProduct->getSProducts()->getId());


                $beforePrice = $kitProduct->getSProducts()->getFirstVariant('kit')->getPrice();

                $kitProduct->setVirtualColumn('beforePrice', $this->moneyFormat($beforePrice));
                $this->price = $beforePrice - ($beforePrice / 100 * $kitProduct->getDiscount());
                $kitProduct->setVirtualColumn('discountProductPrice', $this->moneyFormat($this->price));
                array_push($this->arrayForCart['price'], (float) $this->moneyFormat($this->price));
            }
        }
        return $product;
    }

    /**
     * Get summary price of kit without discounts
     * @return float
     */
    public function getAllPriceBefore() {
        $allPrice = $this->getCalculatePrice('all');
        $formatAllPrice = $allPrice + $this->getMainProductPrice();
        return $this->moneyFormat($formatAllPrice);
    }

    /**
     * Get summary price of kit with discounts
     * @return float
     */
    public function getTotalPrice() {
        $discountPrice = $this->getCalculatePrice('discount');
//        echo $this->getMainProductPrice();
        $formatPrice = $discountPrice + $this->getMainProductPrice();
        return $this->moneyFormat($formatPrice);
    }

    public function getCalculatePrice($type = NULL) {

        $this->allPrice = 0;

        foreach ($this->getShopKitProducts() as $kitProduct) {

            $productPrice = $kitProduct->getSProducts();

            $price = $productPrice->getFirstVariant('kit')->getPrice();

            if ($type === 'discount') {
                $this->price = $price - ($price / 100 * $kitProduct->getDiscount());
                $this->allPrice += $this->price;
            } elseif ($type === 'all') {

                $this->price = $price;
                $this->allPrice += $this->price;
            }
        }

        return $this->allPrice;
    }

    /**
     * return price of main product in kit
     * @return float
     */
    public function getMainProductPrice() {
        $price = $this->getMainProduct()->getFirstVariant()->getPrice();
        return $this->moneyFormat($price);
    }

    public function moneyFormat($price) {
        $format = number_format($price, ShopCore::app()->SSettings->pricePrecision, '.', '');
        return $format;
    }

    public function countProducts() {
        return $this->getShopKitProducts()->count() - 1;
    }

    public function getNamesCart() {
        $this->arrayForCart['name'][] = $this->getMainProduct()->getName();
        return $this->arrayForCart['name'];
    }

    public function getProductIdCart() {
        $this->arrayForCart['id'][] = (int) $this->getMainProduct()->getId();
        return $this->arrayForCart['id'];
    }

    public function getPriceCart() {
        $this->arrayForCart['price'][] = (float) $this->getMainProduct()->getFirstVariant()->getPrice();
        return $this->arrayForCart['price'];
    }

}
